/// *
// * Arraylist class implements List interface andan be found in the java.util
// * package. it is based on an Array data structure. It is widely used because
/// of
// * the functionality and flexibility it offers. Most of the developers choose
// * Arraylist over Array as it’s a very good alternative of traditional java
// * arrays.ArrayList is a resizable- array implementation of the List
// * interface.It implements all optional list operations, and permits all
// * elements,including null.
// */

// class ArrayList1 {
//
// public static void main(String[] args) {
// ArrayList<String> al = new ArrayList<String>();
// al.add("Ravi");
// al.add("Vijay");
// al.add("Ajay");
// al.add("Anuj");
// al.add("Gaurav");
// System.out.println("An initial list of elements: " + al);
// // Removing specific element from arraylist
//
// for (int i = 0; i < al.size(); i++) {
// System.out.println(al.get(i));
// }
//
// al.remove("Vijay");
// System.out.println("After invoking remove(object) method: " + al);
// // Removing element on the basis of specific position
// al.remove(0);
// System.out.println("After invoking remove(index) method: " + al);
//
// // Creating another arraylist
// ArrayList<String> al2 = new ArrayList<String>();
// al2.add("Ravi");
// al2.add("Hanumat");
// // Adding new elements to arraylist
// al.addAll(al2);
// System.out.println("Updated list : " + al);
// System.out.println("Is ArrayList Empty: " + al.isEmpty());
// System.out.println("Before update: " + al.get(1));
// // Updating an element at specific position
// al.set(1, "Gaurav");
// System.out.println("After update: " + al.get(1));
// // Removing all the new elements from arraylist
// al.removeAll(al2);
// System.out.println("After invoking removeAll() method: " + al);
//
// // Removing all the elements available in the list
// al.clear();
// System.out.println("After invoking clear() method: " + al);
// }
// }

// ====================================

// public class Collection_01_ArrayList1 {
// public static void main(String[] args) {
// ArrayList<Integer> myNumbers = new ArrayList<Integer>();
// myNumbers.add(100);
// myNumbers.add(115);
// myNumbers.add(20);
// myNumbers.add(25);
// for (int i : myNumbers) {
// System.out.println(i);
// }
// Collections.sort(myNumbers); // Sort myNumbers
// System.out.println("After sorting ");
//
// for (int j : myNumbers) {
// System.out.println(j);
// }
// System.out.println("Iterating");
//
// Iterator itr = myNumbers.iterator();
// while (itr.hasNext()) {
// System.out.println(itr.next());
// }
// }
// }
