package corejavapackage;

//class A1 {
//	int i, j;
//
//	void showij() {
//		System.out.println("i and j: " + i + " " + j);
//	}
//}
//
//class B1 extends A1 {
//	int k;
//
//	// int i, j;
//	void showk() {
//		System.out.println("k: " + k);
//	}
//
//	void sum() {
//		System.out.println("i+j+k: " + (i + j + k));
//	}
//}
//
//class InheritenceDemo {
//	public static void main(String args[]) {
//		A1 superOb = new A1();
//		B1 subOb = new B1(); // The superclass may be used by itself.
//		superOb.i = 10;
//		superOb.j = 20;
//		System.out.println("Contents of superOb: ");
//		superOb.showij();
//		subOb.i = 7;
//		subOb.j = 8;
//		subOb.k = 9;
//		System.out.println("Contents of subOb: ");
//		subOb.showij();
//		subOb.showk();
//		System.out.println();
//		System.out.println("Sum of i, j and k in subOb:");
//		subOb.sum();
//	}
//}

// ========================================

/*
 * In a class hierarchy, private members remain private to their class. This
 * program contains an error and will not compile.
 */
// Create a superclass.

//class A1 {
//	int i; // public by default
//	// private int j; // private to A
//	protected int j;
//
//	void setij(int x, int y) {
//		i = x;
//		j = y;
//	}
//}
//
//class B1 extends A1 {
//	int total;
//
//	void sum() {
//		total = i + j; // ERROR, j is not accessible here
//	}
//}
//
//class InheritenceDemo {
//	public static void main(String args[]) {
//		B1 subOb = new B1();
//		subOb.setij(10, 12);
//		subOb.sum();
//		System.out.println("Total is " + subOb.total);
//	}
//}
// ==========================================
// This program uses inheritance to extend Box.
//class Box {
//	double width;
//	double height;
//	double depth;
//
//	// // // construct clone of an object
//	Box(Box ob) { // pass object to constructor
//		width = ob.width;
//		height = ob.height;
//		depth = ob.depth;
//	}
//
//	// // // constructor used when all dimensions specified
//	Box(double w, double h, double d) {
//		width = w;
//		height = h;
//		depth = d;
//	}
//
//	//
//	// // // constructor used when no dimensions specified
//	Box() {
//		width = -1; // use -1 to indicate
//		height = -1; // an uninitialized
//		depth = -1; // box
//	}
//
//	Box(double len) { // constructor for BoxWeight
//		//
//		width = height = depth = len;
//	}
//
//	double volume() {// compute and return volume
//		return width * height * depth;
//	}
//}

// Here, Box is extended to include weight.
// class BoxWeight extends Box {
// double weight; // weight of box
// // height
// // t
//
// BoxWeight(double m, double h, double d, double w) { // constructor
// // forBoxWeight
// //
// width = w;
// height = h;
// depth = d;
// weight = m;
// }
// }
//
// class InheritenceDemo {
// public static void main(String args[]) {
// BoxWeight mybox1 = new BoxWeight(10, 20, 15, 34.3);
// BoxWeight mybox2 = new BoxWeight(2, 3, 4, 0.076);
// double vol;
// vol = mybox1.volume();
// System.out.println("Volume of mybox1 is " + vol);
// System.out.println("Weight of mybox1 is " + mybox1.weight);
// System.out.println();
// vol = mybox2.volume();
// System.out.println("Volume of mybox2 is " + vol);
// System.out.println("Weight of mybox2 is " + mybox2.weight);
// }
// }
// =================================

// A complete implementation of BoxWeight.
class Box {
	private double width;
	private double height;
	private double depth;

	// construct clone of an object
	Box(Box ob) { // pass object to constructor
		width = ob.width;
		height = ob.height;
		depth = ob.depth;
	}

	// // constructor used when all dimensions specified
	Box(double w, double h, double d) {
		width = w;
		height = h;
		depth = d;
	}

	//
	// // constructor used when no dimensions specified
	Box() {
		width = -1; // use -1 to indicate
		height = -1; // an uninitialized
		depth = -1; // box
	}

	//
	// // constructor used when cube is created
	Box(double len) {
		width = height = depth = len;
	}

	//
	// // compute and return volume
	double volume() {
		return width * height * depth;
	}
}

//
//// BoxWeight now fully implements all constructors.
class BoxWeight extends Box {
	double weight; // weight of box
	// construct clone of an object

	BoxWeight(BoxWeight ob) { // pass object to constructor
		super(ob);
//		 width = ob.width;
//		 height = ob.height;
//		 depth = ob.depth;
		weight = ob.weight;
	}

	//
	// // constructor when all parameters are specified
	BoxWeight(double w, double h, double d, double m) {
		super(w, h, d); // call superclass constructor
		weight = m;
	}

	// default constructor
	BoxWeight() {
		super();
		weight = -1;
	}

	// constructor used when cube is created
	BoxWeight(double len, double m) {
		super(len);
		weight = m;
	}
}

//
class InheritenceDemo {
	public static void main(String args[]) {
		BoxWeight mybox1 = new BoxWeight(10, 20, 15, 34.3);
		BoxWeight mybox2 = new BoxWeight(2, 3, 4, 0.076);
		BoxWeight mybox3 = new BoxWeight(); // default
		BoxWeight mycube = new BoxWeight(3, 2);
		BoxWeight myclone = new BoxWeight(mybox1);
		double vol;
		vol = mybox1.volume();
		System.out.println("Volume of mybox1 is " + vol);
		System.out.println("Weight of mybox1 is " + mybox1.weight);
		System.out.println();
		vol = mybox2.volume();
		System.out.println("Volume of mybox2 is " + vol);
		System.out.println("Weight of mybox2 is " + mybox2.weight);
		System.out.println();
		vol = mybox3.volume();
		System.out.println("Volume of mybox3 is " + vol);
		System.out.println("Weight of mybox3 is " + mybox3.weight);
		System.out.println();
		vol = myclone.volume();
		System.out.println("Volume of myclone is " + vol);
		System.out.println("Weight of myclone is " + myclone.weight);
		System.out.println();
		vol = mycube.volume();
		System.out.println("Volume of mycube is " + vol);
		System.out.println("Weight of mycube is " + mycube.weight);
		System.out.println();
	}
}
// =======================

// Multilevel inheritence
// class GrandParent {
// void fun1() {
// System.out.println("GrandParent...");
// }
// }
//
// class Parent extends GrandParent {
// void fun2() {
// System.out.println("Parent...");
// }
// }
//
// class Child extends Parent {
// void fun3() {
// System.out.println("child...");
// }
// }
//
// class InheritenceDemo {
// public static void main(String args[]) {
// Child d = new Child();
// d.fun1();
// d.fun2();
// d.fun3();
// }
// }
// ==============================

// Aggregation

// class Operation {
// int square(int n) {
// return n * n;
// }
// }
//
// class InheritenceDemo {
// Operation op;// aggregation
// double pi = 3.14;
//
// double area(int radius) {
// op = new Operation();
// int rsquare = op.square(radius);// code reusability (i.e. delegates the
// method call).
// return pi * rsquare;
// }
//
// public static void main(String args[]) {
// InheritenceDemo c = new InheritenceDemo();
// double result = c.area(5);
// System.out.println(result);
// }
// }
// ========================================

// public class Address {
// String city, state, country;
//
// public Address(String city, String state, String country) {
// this.city = city;
// this.state = state;
// this.country = country;
// }
//
// }
//
// public class InheritenceDemo {
// int id;
// String name;
// Address address;
//
// InheritenceDemo(int id, String name, Address address) {
// this.id = id;
// this.name = name;
// this.address = address;
// }
//
// void display() {
// System.out.println(id + " " + name);
// System.out.println(address.city + " " + address.state + " " +
// address.country);
// }
//
// public static void main(String[] args) {
// Address address1 = new Address("gzb", "UP", "india");
// Address address2 = new Address("gno", "UP", "india");
//
// InheritenceDemo e = new InheritenceDemo(111, "varun", address1);
// InheritenceDemo e2 = new InheritenceDemo(112, "arun", address2);
//
// e.display();
// e2.display();
//
// }
// }
