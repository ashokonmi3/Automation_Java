package certification.oracle;

//public class Java_03_Methods_Encapsulation {
//
//	public static void main(String[] args) {
//		// TODO Auto-generated method stub
//
//	}
//
//}
//
//class Student {
//
//	private double marks1, marks2, marks3;
//	private double maxMarks = 100;
//
//	// public double getAverage() {
//	// double avg = 0;
//	//
//	// avg = ((marks1 + marks2 + marks3) / (maxMarks * 3)) * 100;
//	// return avg;
//	// }
//
//	// public void setAverage(double val) {
//	// avg = val;
//	// }
//	public void localVariableInLoop() {
//		for (int ctr = 0; ctr < 5; ++ctr) {
//			System.out.println(ctr);
//		}
//		System.out.println(ctr);
//	}
//
//	public double getAverage() {
//		if (maxMarks > 0) {
//			double avg = 0;
//			avg = (marks1 + marks2 + marks3) / (maxMarks * 3) * 100;
//			return avg;
//
//			// Variable avg is local to if block
//
//		} else {
//			avg = 0;
//			return avg;
//
//			// Variable avg can’t be accessed because it’s local to the if block. Variables
//			// local to the if block can’t be accessed in the else block.
//
//		}
//	}
//
//}
//=============

//class Phone {
//	private boolean tested;
//
//	public void setTested(boolean val) {
//		tested = val;
//	}
//
//	public boolean isTested() {
//		val = false;// Method parameter val is accessible only in method setTested
//
//		// Variable val can’t be accessed in method isTested
//
//		return tested;
//	}
//
//	boolean isPrime(int num) {
//		if (num <= 1)
//			return false;
//		boolean result = true;
//		for (int ctr = num - 1; ctr > 1; ctr--) {
//			if (num % ctr == 0)
//				result = false;
//		}
//		return result;
//
//	}
//
//}
//================

//class Phone {
//	private boolean tested;
//
//	public void setTested(boolean val) {
//		tested = val;
//
//		// Instance variable tested
//		// Variable tested is accessible in method setTested
//
//	}
//
//	public boolean isTested() {
//		return tested;
//
//		// Variable tested is also accessible in method isTested
//
//	}
//}
//===========
//class Phone {
//	static boolean softKeyboard = true; // Class variable softKeyboard
//
//}
//
//class Java_03_Methods_Encapsulation {
//	public static void main(String[] args) {
//		Phone.softKeyboard = false;
//		Phone p1 = new Phone();
//		Phone p2 = new Phone();
//		System.out.println(p1.softKeyboard);
//		Phone p3 = null;
//		System.out.println(p3.softKeyboard);// Won’t throw an exception,
//
//		// Accesses the class variable by using the name of the class. It can be
//		// accessed even before any of the class’s objects exist.
//
//		// Prints false. A class variable can be read by using objects of the class.
//
//		// Prints false
//
//	}
//}
//=============

//class MyPhone {
//	static boolean softKeyboard = true;
//	boolean softKeyboard = true;
//
//	// Won’t compile. Class variable and instance variable can’t be defined using
//	// the same name in a class.
//
//}
//
//class MyPhone {
//	static boolean softKeyboard = true;
//	String phoneNumber;
//
//	void myMethod() {
//		boolean softKeyboard = true;
//		String phoneNumber;
//
//		// Class variable
//		// softKeyboard Instance variable phoneNumber
//
//		// Local variable softKeyboard can coexist with class variable softKeyboard
//
//	}
//}
//===============

//class Phone {
//	String phoneNumber = "123456789";
//
//	void setNumber() {
//		String phoneNumber;
//		phoneNumber = "987654321";
//	}
//}
//
//class Java_03_Methods_Encapsulation {
//	public static void main(String[] args) {
//		Phone p1 = new Phone();
//		p1.setNumber();
//		System.out.println(p1.phoneNumber);
//	}
//}
//================

class Exam {
	String name;

	public void setName(String newName) {
		name = newName;
	}
}
class ObjectLife1 {
public static void main(String args[]) { Exam myExam = new Exam(); myExam.setName("OCA Java Programmer 1"); myExam = null;
 
b Object
creation	c
 

Access method
 
myExam = new Exam();
myExam.setName("PHP");
}
}
